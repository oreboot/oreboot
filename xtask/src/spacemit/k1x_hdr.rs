use log::trace;
use rsa::sha2::Sha256;
use rsa::signature::{RandomizedSigner, SignatureEncoding};
use rsa::traits::PublicKeyParts;
use rsa::{pkcs1v15::SigningKey, BigUint, RsaPrivateKey};
use zerocopy::IntoBytes;
use zerocopy_derive::{FromBytes, Immutable, IntoBytes};

const DEBUG: bool = false;

// This is the RSA key exponent.
// NOTE: It is _not_ stored in the image, so presumably, it is hardcoded in the mask ROM.
const COMMON_EXP: u64 = 0x10001;

const AIHD: &[u8; 4] = b"AIHD";

#[derive(FromBytes, Immutable, IntoBytes, Clone, Copy, Debug)]
#[repr(C)]
struct Header {
    magic: [u8; 4],
    version: u8,
    secure: u8,
    reserved: [u8; 2],
    img_size: u64,
    load_addr: u64,
    pad: [u8; 8],
}

#[derive(FromBytes, Immutable, IntoBytes, Clone, Copy, Debug)]
#[repr(C)]
struct Config {
    key_default: u32,
    table_num: u32,
    key_name: [u8; 16],
    key_id: u32,
}

const KEY_NAME_MAX_LEN: usize = 16;

impl Config {
    fn new(key_name: &str) -> Self {
        let l = key_name.len();
        assert!(l <= KEY_NAME_MAX_LEN);
        let mut kn = [0u8; KEY_NAME_MAX_LEN];
        kn[0..l].copy_from_slice(key_name.as_bytes());

        Self {
            key_default: 0,
            table_num: 2,
            key_name: kn,
            key_id: 0,
        }
    }
}

const HC_ADDR: u64 = 0x100;
const HC_SIZE: u64 = 0x200;

fn dump(s: &[u8]) {
    let chunk_size = 16;
    for (i, c) in s.chunks(chunk_size).enumerate() {
        println!("{:08x}: {c:02x?}", i * chunk_size);
    }
}

fn align(s: &[u8], alignment: usize) -> Vec<u8> {
    let len = s.len();
    let aligned_size = (len / alignment + 1) * alignment;
    let mut v = s.to_vec();
    v.resize(aligned_size, 0);
    v
}

// Create manifest, which includes the modulus of the payload signature key, and sign it.
fn create_signed_manifest(key: RsaPrivateKey, payload_key_mod: &[u8]) -> Vec<u8> {
    trace!("{key:#02x?}");

    let h = Header {
        magic: *AIHD,
        version: 1,
        secure: 0,
        reserved: [0, 0],
        img_size: HC_SIZE,
        load_addr: HC_ADDR,
        pad: [0xa5u8; 8],
    };
    let c = Config::new("spl");
    let mut header_and_config = [h.as_bytes(), c.as_bytes()].concat().to_vec();
    header_and_config.resize(HC_SIZE as usize, 0);

    // What to sign: header + config + payload key modulus + reserved space
    let manifest = [
        header_and_config.as_bytes(),
        &payload_key_mod,
        &[0u8; 0x700],
    ]
    .concat();

    let signing_key = SigningKey::<Sha256>::new(key);
    let mut rng = rand::thread_rng();
    let signature = signing_key.sign_with_rng(&mut rng, &manifest);
    trace!("{signature:02x?}");

    [manifest, signature.to_vec()].concat()
}

const PAYLOAD_ALIGNMENT: usize = 32;

fn image(
    payload: &[u8],
    payload_key: RsaPrivateKey,  // key to sign the payload with
    manifest_key: RsaPrivateKey, // key to sign the manifest with
) -> Vec<u8> {
    let manifest_mod = manifest_key.n().to_bytes_be();
    let payload_mod = payload_key.n().to_bytes_be();

    let signed_manifest = create_signed_manifest(manifest_key, &payload_mod);

    // Align payload and create header, then sign them
    let payload_aligned = align(payload, PAYLOAD_ALIGNMENT);
    let load_addr = HC_ADDR + HC_SIZE;
    let h = Header {
        magic: *AIHD,
        version: 1,
        secure: 0,
        reserved: [0, 0],
        img_size: payload_aligned.len() as u64,
        load_addr,
        pad: [0xa5u8; 8],
    };
    let header_and_aligned_payload = [&h.as_bytes(), payload_aligned.as_bytes()].concat();

    let signing_key = SigningKey::<Sha256>::new(payload_key);
    let mut rng = rand::thread_rng();
    let signature = signing_key.sign_with_rng(&mut rng, &header_and_aligned_payload);
    trace!("{signature:02x?}");

    // Concat it all
    [
        &manifest_mod,
        signed_manifest.as_bytes(),
        &[0u8; (0x400 - 32)],
        &header_and_aligned_payload,
        &signature.to_bytes(),
    ]
    .concat()
}

pub fn build(payload: &[u8]) -> Vec<u8> {
    let payload_key = RsaPrivateKey::from_p_q(
        BigUint::from_bytes_be(&PAYLOAD_KEY_P),
        BigUint::from_bytes_be(&PAYLOAD_KEY_Q),
        BigUint::from_bytes_be(&COMMON_EXP.to_be_bytes()),
    )
    .unwrap();
    let manifest_key = RsaPrivateKey::from_p_q(
        BigUint::from_bytes_be(&MANIFEST_KEY_P),
        BigUint::from_bytes_be(&MANIFEST_KEY_Q),
        BigUint::from_bytes_be(&COMMON_EXP.to_be_bytes()),
    )
    .unwrap();

    let img = image(payload, payload_key, manifest_key);

    if DEBUG {
        dump(&img);
    }

    img
}

// RSA parameters, can be dumped via `openssl rsa -in openssl_private_rsa.key -text -pubout`.
const MANIFEST_KEY_P: [u8; 128] = [
    0xc6, 0x1c, 0x4f, 0xd5, 0x8d, 0x1e, 0x27, 0xe1, 0xa1, 0x48, 0x2f, 0xd0, 0x2b, 0x4d, 0xd5, 0x9b,
    0x97, 0xa0, 0xad, 0xf1, 0xb5, 0x54, 0xa1, 0xab, 0x23, 0x3b, 0xaa, 0xad, 0x64, 0x40, 0x30, 0xec,
    0xb5, 0x68, 0x3c, 0x85, 0x7d, 0xc5, 0xc9, 0xed, 0x6a, 0x49, 0x02, 0xf5, 0x9b, 0xdf, 0x90, 0xf0,
    0x10, 0x1b, 0x70, 0x51, 0x98, 0x54, 0x6c, 0xa9, 0xc5, 0xbd, 0x52, 0x09, 0x07, 0xf0, 0xd0, 0xb7,
    0xfb, 0x10, 0x4e, 0x64, 0xbb, 0xf9, 0x59, 0xf6, 0xeb, 0xad, 0xc5, 0x96, 0x0d, 0x83, 0xf9, 0xf1,
    0x3e, 0xde, 0x64, 0xe7, 0x03, 0xeb, 0x53, 0xaf, 0xa6, 0x2b, 0x3d, 0xfb, 0x2e, 0x86, 0x76, 0x4a,
    0x71, 0x12, 0xde, 0x12, 0xf8, 0x57, 0xe5, 0x52, 0x1c, 0xec, 0x29, 0x07, 0x2f, 0x65, 0x28, 0x82,
    0x8e, 0x65, 0xf3, 0x9d, 0xe6, 0xe7, 0xb9, 0xe8, 0x1b, 0x18, 0xed, 0xb5, 0x96, 0xa1, 0xbe, 0x6d,
];
const MANIFEST_KEY_Q: [u8; 128] = [
    0xff, 0xfb, 0x92, 0x1b, 0xd0, 0x9a, 0xfe, 0x03, 0xf3, 0x08, 0x14, 0x92, 0x94, 0x21, 0xbb, 0xd2,
    0x76, 0x65, 0x75, 0x47, 0x56, 0x36, 0xe3, 0xe9, 0x63, 0x41, 0xbd, 0xb8, 0xe2, 0xc6, 0x8d, 0x1f,
    0xe3, 0x8e, 0x50, 0xfa, 0xaa, 0x66, 0x4a, 0xc8, 0x56, 0xf8, 0xdd, 0x96, 0xf7, 0x0a, 0xd0, 0xed,
    0xfe, 0xd4, 0x0a, 0x45, 0x35, 0x71, 0xb1, 0x42, 0x13, 0xd2, 0x6a, 0x3b, 0x5a, 0xe9, 0x90, 0xc2,
    0x79, 0x4d, 0xb6, 0x6e, 0x71, 0x1e, 0xc4, 0x17, 0xf7, 0xe0, 0x84, 0xba, 0x8c, 0x1b, 0xfb, 0xf2,
    0xe5, 0x0a, 0x6b, 0x7a, 0x33, 0xd9, 0x69, 0xc9, 0x46, 0x58, 0xd4, 0xd2, 0x54, 0x6d, 0xa7, 0xad,
    0xc1, 0x0b, 0xb9, 0xb4, 0x29, 0x19, 0xff, 0x78, 0x1a, 0x74, 0x46, 0x0b, 0xc1, 0xe9, 0x62, 0xd2,
    0xdf, 0xa0, 0x76, 0xb6, 0x28, 0x42, 0x27, 0x3d, 0x88, 0x74, 0x38, 0x37, 0x5d, 0xf1, 0x6d, 0xeb,
];

const PAYLOAD_KEY_P: [u8; 128] = [
    0xc2, 0xef, 0x56, 0xea, 0x95, 0x5d, 0xa8, 0x28, 0x97, 0x01, 0x8c, 0x4a, 0x73, 0x54, 0xa5, 0xc9,
    0x32, 0x20, 0xab, 0xdd, 0xff, 0x02, 0xf0, 0x6b, 0xf1, 0xe6, 0xae, 0x69, 0x6e, 0x0d, 0x33, 0xca,
    0xf6, 0xf3, 0xf4, 0x50, 0x7d, 0x35, 0xd9, 0x36, 0x8d, 0xef, 0xe4, 0x52, 0x45, 0xf2, 0x77, 0xec,
    0x64, 0xdd, 0x59, 0x7b, 0x49, 0xc0, 0x36, 0x74, 0x87, 0xf8, 0xda, 0x88, 0x9c, 0x34, 0xc4, 0x3e,
    0x81, 0xf9, 0x38, 0xbe, 0x17, 0xec, 0xc4, 0xc5, 0x39, 0x72, 0xb7, 0x45, 0x88, 0x51, 0x4d, 0x9c,
    0x49, 0xd4, 0x9e, 0x6a, 0xed, 0x7b, 0x87, 0x56, 0x10, 0xc2, 0x56, 0x9e, 0xd2, 0x3a, 0x9d, 0x6b,
    0x3e, 0x28, 0x42, 0x65, 0x9d, 0xf1, 0x8a, 0x07, 0x79, 0xe5, 0x54, 0x0a, 0x72, 0x51, 0xec, 0x9c,
    0xd6, 0x62, 0x75, 0xf2, 0x95, 0x0e, 0xfa, 0x5e, 0xa0, 0x43, 0xc5, 0x1d, 0x3c, 0x7a, 0x6e, 0xc3,
];
const PAYLOAD_KEY_Q: [u8; 128] = [
    0xdd, 0xa8, 0xa6, 0x01, 0xba, 0xdd, 0xc8, 0x1b, 0x08, 0x2a, 0xb4, 0x7c, 0x21, 0xce, 0xe3, 0xb6,
    0x68, 0xaa, 0xce, 0x78, 0xef, 0x55, 0x1e, 0xf1, 0x9a, 0xa1, 0x4c, 0xd2, 0x39, 0xdb, 0x2f, 0x6a,
    0xf5, 0xa7, 0x1d, 0x7a, 0x0b, 0x06, 0x6b, 0x5b, 0x62, 0x65, 0x40, 0x80, 0x62, 0xae, 0x77, 0x8d,
    0x88, 0xea, 0xa2, 0xa6, 0xf7, 0x0a, 0x41, 0x61, 0x3b, 0xea, 0x6f, 0x04, 0xa5, 0x74, 0x3b, 0xa5,
    0xde, 0x1d, 0xbf, 0x0e, 0xb0, 0x17, 0xa7, 0x27, 0x66, 0x87, 0x8c, 0xdb, 0x62, 0x31, 0x1c, 0x5c,
    0x18, 0xeb, 0xad, 0x0f, 0xee, 0xfb, 0x67, 0x50, 0xa3, 0x5b, 0x43, 0xf6, 0x93, 0xa4, 0x22, 0x7b,
    0xc4, 0xa0, 0x63, 0xfc, 0x22, 0x0b, 0x0d, 0x20, 0x32, 0xa2, 0x97, 0x7b, 0x32, 0x27, 0xd0, 0x47,
    0x61, 0x66, 0xf3, 0x95, 0xe6, 0x1c, 0x38, 0x4f, 0x7c, 0x4d, 0xae, 0x04, 0x60, 0x30, 0x2e, 0xed,
];

#[cfg(test)]
const PAYLOAD_FIXTURE: &[u8] = include_bytes!("tests/fixtures/nothing.bin");
#[cfg(test)]
const IMAGE_FIXTURE: &[u8] = include_bytes!("tests/fixtures/k1x_image_signed.bin");

#[test]
fn sign() {
    let manifest_key = RsaPrivateKey::from_p_q(
        BigUint::from_bytes_be(&MANIFEST_KEY_P),
        BigUint::from_bytes_be(&MANIFEST_KEY_Q),
        BigUint::from_bytes_be(&COMMON_EXP.to_be_bytes()),
    )
    .unwrap();
    let payload_key = RsaPrivateKey::from_p_q(
        BigUint::from_bytes_be(&PAYLOAD_KEY_P),
        BigUint::from_bytes_be(&PAYLOAD_KEY_Q),
        BigUint::from_bytes_be(&COMMON_EXP.to_be_bytes()),
    )
    .unwrap();

    let img = image(PAYLOAD_FIXTURE, payload_key, manifest_key);
    assert_eq!(img, IMAGE_FIXTURE);
}
