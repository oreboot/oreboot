trigger:
- main

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight (UTC) build
  branches:
    include:
    - main
  always: true

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: CheckQuality
  steps:
  - checkout: self
    fetchDepth: 1  # Download only latest commit, not all history
  - script: |
      sudo apt-get update
      make ciprepare
    displayName: 'Install Rust Dependencies'
  - script: |
      make --keep-going format check=true
    displayName: 'Check formatting'
  - script: |
      make --keep-going test
    displayName: 'Run rust tests'
  - script: |
      make --keep-going clippy
    displayName: 'Run clippy linter'
  - script: |
      make --keep-going mainboards
    displayName: 'Build all mainboards'
  - script: |
      ./scripts/generate-size-report.sh
    displayName: 'Generate report of binary sizes'
- job: BuildX86QEMU
  displayName: 'Build QEMU q35 board for x86'
  steps:
  - checkout: self
    fetchDepth: 1  # Download only latest commit, not all history
  - script: |
      sudo apt-get update
      make ciprepare
      cd src/mainboard/emulation/qemu-q35
      make
      STACK_SIZES=$(make stack-sizes | tee /dev/stdout)
      if ! echo "$STACK_SIZES" | grep '0x[0-9a-f]\+\s\+[0-9]\+\s\+_start' > /dev/null; then
        echo "Error: Didn't see stack size of _start. make stack-sizes might be broken."
        exit 1
      fi
- job: BuildFSPQEMU
  displayName: 'Test FSP QEMU'
  steps:
  - checkout: self
    fetchDepth: 1  # Download only latest commit, not all history
  - script: |
      sudo apt-get update
      make ciprepare
      cd src/mainboard/emulation/qemu-fsp
      make
      STACK_SIZES=$(make stack-sizes | tee /dev/stdout)
      if ! echo "$STACK_SIZES" | grep '0x[0-9a-f]\+\s\+[0-9]\+\s\+_start' > /dev/null; then
        echo "Error: Didn't see stack size of _start. make stack-sizes might be broken."
        exit 1
      fi
    displayName: 'Build FSP QEMU firmware'
  - script: |
      (
        cd src/mainboard/emulation/qemu-fsp
        echo 'NO: timeout 120s make run | tee serial'
        echo 'NO: grep Running.payload serial'
      )
    displayName: 'Run FSP QEMU firmware in QEMU'
- job: TestSiFiveQEMU
  displayName: 'Test RISC-V SiFive board in QEMU'
  steps:
  - checkout: self
    fetchDepth: 1  # Download only latest commit, not all history
  - script: |
      sudo apt-get update
      make ciprepare
    displayName: 'Install Rust Dependencies'
  - script: |
      (
        cd src/mainboard/sifive/hifive
        PAYLOAD_A=../../../../payloads/src/external/simple/testtesttest make
      )
    displayName: 'Build firmware'
  - script: |
      exit 0 # Rebuilding QEMU takes too long. Remove once we cache.
      git clone --single-branch --branch v5.1.0 https://github.com/qemu/qemu
      mkdir qemu/build-riscv64
      (
        cd qemu/build-riscv64
        ../configure --target-list=riscv64-softmmu
        make -j16
        sudo ln -s $PWD/riscv64-softmmu/qemu-system-riscv64 /usr/bin/
        sudo ln -s $PWD/qemu-img /usr/bin/
      )
    displayName: 'Build QEMU'
  - script: |
      exit 0 # Rebuilding QEMU takes too long. Remove once we cache.
      (
        cd src/mainboard/sifive/hifive
        PAYLOAD_A=../../../../payloads/src/external/simple/testtesttest timeout 120s make run | tee serial
        grep TESTTESTTEST serial
      )
    displayName: 'Run test'
- job: TestRISCVVirtBoardQEMU
  displayName: 'Test RISC-V QEMU Virt board in QEMU'
  steps:
  - checkout: self
    fetchDepth: 1  # Download only latest commit, not all history
  - script: |
      sudo apt-get update
      make ciprepare
    displayName: 'Install Rust Dependencies'
  - script: |
      (
        cd src/mainboard/emulation/qemu-riscv
        make
        STACK_SIZES=$(make stack-sizes | tee /dev/stdout)
        if ! echo "$STACK_SIZES" | grep '0x[0-9a-f]\+\s\+[0-9]\+\s\+_start' > /dev/null; then
          echo "Error: Didn't see stack size of _start. make stack-sizes might be broken."
          exit 1
        fi
      )
    displayName: 'Build oreboot image'
  - script: |
      exit 0 # Rebuilding QEMU takes too long. Remove once we cache.
      git clone --single-branch --branch v5.1.0 https://github.com/qemu/qemu
      mkdir qemu/build-riscv64
      (
        cd qemu/build-riscv64
        ../configure --target-list=riscv64-softmmu
        make -j16
        sudo ln -s $PWD/riscv64-softmmu/qemu-system-riscv64 /usr/bin/
        sudo ln -s $PWD/qemu-img /usr/bin/
      )
    displayName: 'Build QEMU'
  - script: |
      exit 0 # Rebuilding QEMU takes too long. Remove once we cache.
      (
        cd src/mainboard/emulation/qemu-riscv
        timeout 30s make run | tee serial
        grep "Running payload" serial
      )
    displayName: 'Run test'
